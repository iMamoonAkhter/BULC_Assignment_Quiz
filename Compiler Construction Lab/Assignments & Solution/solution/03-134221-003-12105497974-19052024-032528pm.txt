#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include <fstream>
#include <iostream>
using namespace std;

enum COL_NAME
{
	L=0,D,U,Plus,Minus,E,Less,greater,Div,Mul,Dot,NL,NS,NNL,NFS,WS,Other,Dollar,A,R,T
};

enum TOKENS
{
	Identifier=0, ReserveWord,Divide,PlusPlus,Plus,MinusMinus,Equal,EqualEqual,Lessequal,greaterEqual,WholeNumber
,FloatNumber,ExponentialN,SinglelC,MultiLC,Multiply
};

COL_NAME getCharType(char ch)
{
	if(isalpha(ch))
		return L;

	else if(isdigit(ch))
		return D;

	else if(ch=='_')
		return U;
　　　else if(ch=='>')
		return greater;

　　　else if(ch=='<')
		return Less;
　　　else if(ch=='=')
		return E;
　　　else if(ch=='+')
		return Plus;
　　　else if(ch=='-')
		return Minus;
　　　else if(ch=='/')
		return Div;
　　　else if(ch=='*')
		return Mul;

　　　else if(ch=='.')
		return Dot;
　　　else if(ch=='\n')
		return NL;


　　　else if(ch=='!*')
		return NS;
　　　else if(ch=='!\n')
		return NNL;
　　　else if(ch=='!\n')
		return NNL;



	else if(ch=='$')
		return Dollar;

    else if(isspace(ch))
        return WS;

	else
        return Other;

}

int main(){


	char b1[4096];
	char b2[4096];

	int TT[61][21]={
	    {
        {1,1,40,4,12,18,27,33,61,9,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
　　　　{1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Identifier},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
        {5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,reserveWord},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1-1,-1,}
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,52,56,-1,-1,-1,-1,-1,10,11,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Divide },
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,16,-1,-1,-1 },
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,14,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,PlusPlus},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Plus},
　　　　{-1,-1,-1,-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22,23,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,21,20,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,MinusMinus},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Minus},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,26,25,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Multiply},
　　　　{-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,29,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,31,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Equal},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,EqualEqual},
　　　　{-1,-1,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,39,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,37,36,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,Lessequal},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,greaterEqual},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,40,-1,-1,-1,-1,-1,-1,-1,-1,43,-1,-1,-1,-1,41,42,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,WholeNumber
　　　　},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,45,46,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,FloatNumber},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　
　　　　{-1,-1,-1,48,51,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,50,49,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,ExponentialN},
　　　　{-1,-1,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53,-1,52,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,52,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,SinglelC},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,57,-1,-1,56,-1,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,60,59,-1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1},
　　　　{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,MultiLC},
　　　　{-1,-1,-1,-1,-1,-1,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
　　　　	};

	ifstream obj;
	obj.open("testing.txt");

	char * curr_buff = b1;
	obj.get(curr_buff,4096, EOF);

	int count=0;

	int state=0;
	char lex[100];
	int j=0;

	while(curr_buff[count]!='\0'){

		if(state != -1){
            if(!TT[state][A]){
                state=TT[state][getCharType(curr_buff[count])];

                lex[j]=curr_buff[count];
                count++;
                j++;
            }
            else
            {
                lex[j]='\0';

                if(TT[state][R])
                {
                    if(TT[state][T] == 0)
                        cout<<lex<<"\t Identifier \n";
                    else if(TT[state][T] == 1)
                        cout<<lex<<"\t Reserve_Word \n";
                    else
                        ;

                    j=0;
                    state=0;
                }
                else
                    state = -1;
            }
		}
		else{

            if(!isspace(curr_buff[count])){
                count++;
            }
            else{
                state = 0;
                j = 0;
                count++;
            }
		}

		if(count>4095)
		{
			if(curr_buff==b1){
				curr_buff = b2;
			}
			else
				curr_buff = b1;

			obj.get(curr_buff,4096, EOF);
			count=0;
		}
	}


	getch();
	return 0;
}